// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PtyServiceClient is the client API for PtyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PtyServiceClient interface {
	OnEvent(ctx context.Context, opts ...grpc.CallOption) (PtyService_OnEventClient, error)
}

type ptyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPtyServiceClient(cc grpc.ClientConnInterface) PtyServiceClient {
	return &ptyServiceClient{cc}
}

func (c *ptyServiceClient) OnEvent(ctx context.Context, opts ...grpc.CallOption) (PtyService_OnEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &PtyService_ServiceDesc.Streams[0], "/ptyrpc.PtyService/OnEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &ptyServiceOnEventClient{stream}
	return x, nil
}

type PtyService_OnEventClient interface {
	Send(*OnEventRequest) error
	Recv() (*OnEventResponse, error)
	grpc.ClientStream
}

type ptyServiceOnEventClient struct {
	grpc.ClientStream
}

func (x *ptyServiceOnEventClient) Send(m *OnEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ptyServiceOnEventClient) Recv() (*OnEventResponse, error) {
	m := new(OnEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PtyServiceServer is the server API for PtyService service.
// All implementations must embed UnimplementedPtyServiceServer
// for forward compatibility
type PtyServiceServer interface {
	OnEvent(PtyService_OnEventServer) error
	mustEmbedUnimplementedPtyServiceServer()
}

// UnimplementedPtyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPtyServiceServer struct {
}

func (UnimplementedPtyServiceServer) OnEvent(PtyService_OnEventServer) error {
	return status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedPtyServiceServer) mustEmbedUnimplementedPtyServiceServer() {}

// UnsafePtyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PtyServiceServer will
// result in compilation errors.
type UnsafePtyServiceServer interface {
	mustEmbedUnimplementedPtyServiceServer()
}

func RegisterPtyServiceServer(s grpc.ServiceRegistrar, srv PtyServiceServer) {
	s.RegisterService(&PtyService_ServiceDesc, srv)
}

func _PtyService_OnEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PtyServiceServer).OnEvent(&ptyServiceOnEventServer{stream})
}

type PtyService_OnEventServer interface {
	Send(*OnEventResponse) error
	Recv() (*OnEventRequest, error)
	grpc.ServerStream
}

type ptyServiceOnEventServer struct {
	grpc.ServerStream
}

func (x *ptyServiceOnEventServer) Send(m *OnEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ptyServiceOnEventServer) Recv() (*OnEventRequest, error) {
	m := new(OnEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PtyService_ServiceDesc is the grpc.ServiceDesc for PtyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PtyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptyrpc.PtyService",
	HandlerType: (*PtyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnEvent",
			Handler:       _PtyService_OnEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/api/api.proto",
}
